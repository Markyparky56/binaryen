(module
 (type $0 (func))
 (type $FUNCSIG$v (func))
 (import "env" "DYNAMICTOP_PTR" (global $DYNAMICTOP_PTR i32))
 (import "env" "segfault" (func $segfault))
 (import "env" "alignfault" (func $alignfault))
 (memory $0 (shared 100 100))
 (func $loads (type $0) ;; 0
  (drop
   (call $SAFE_HEAP_LOAD_i32_4_U_4
    (i32.const 1)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_i32_4_U_A
    (i32.const 1)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_i32_4_U_4
    (i32.const 2)
    (i32.const 31)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_i32_4_U_2
    (i32.const 3)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_i32_4_U_1
    (i32.const 4)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_i32_1_1
    (i32.const 5)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_i32_2_U_2
    (i32.const 6)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_i64_1_1
    (i32.const 7)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_i64_2_U_2
    (i32.const 8)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_i64_4_4
    (i32.const 9)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_i64_8_U_4
    (i32.const 10)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_i64_8_U_8
    (i32.const 11)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_f32_4_4
    (i32.const 12)
    (i32.const 0)
   )
  )
  (drop
   (call $SAFE_HEAP_LOAD_f64_8_8
    (i32.const 13)
    (i32.const 0)
   )
  )
 )
 (func $stores (type $0) ;; 1
  (call $SAFE_HEAP_STORE_i32_4_4
   (i32.const 1)
   (i32.const 0)
   (i32.const 100)
  )
  (call $SAFE_HEAP_STORE_i32_4_A
   (i32.const 1)
   (i32.const 0)
   (i32.const 100)
  )
  (call $SAFE_HEAP_STORE_i32_4_4
   (i32.const 2)
   (i32.const 31)
   (i32.const 200)
  )
  (call $SAFE_HEAP_STORE_i32_4_2
   (i32.const 3)
   (i32.const 0)
   (i32.const 300)
  )
  (call $SAFE_HEAP_STORE_i32_4_1
   (i32.const 4)
   (i32.const 0)
   (i32.const 400)
  )
  (call $SAFE_HEAP_STORE_i32_1_1
   (i32.const 5)
   (i32.const 0)
   (i32.const 500)
  )
  (call $SAFE_HEAP_STORE_i32_2_2
   (i32.const 6)
   (i32.const 0)
   (i32.const 600)
  )
  (call $SAFE_HEAP_STORE_i64_1_1
   (i32.const 7)
   (i32.const 0)
   (i64.const 700)
  )
  (call $SAFE_HEAP_STORE_i64_2_2
   (i32.const 8)
   (i32.const 0)
   (i64.const 800)
  )
  (call $SAFE_HEAP_STORE_i64_4_4
   (i32.const 9)
   (i32.const 0)
   (i64.const 900)
  )
  (call $SAFE_HEAP_STORE_i64_8_4
   (i32.const 10)
   (i32.const 0)
   (i64.const 1000)
  )
  (call $SAFE_HEAP_STORE_i64_8_8
   (i32.const 11)
   (i32.const 0)
   (i64.const 1100)
  )
  (call $SAFE_HEAP_STORE_f32_4_4
   (i32.const 12)
   (i32.const 0)
   (f32.const 1200)
  )
  (call $SAFE_HEAP_STORE_f64_8_8
   (i32.const 13)
   (i32.const 0)
   (f64.const 1300)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_1_A (param $0 i32) (param $1 i32) (result i32) ;; 2
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.atomic.load8_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_1_1 (param $0 i32) (param $1 i32) (result i32) ;; 3
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load8_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_1_U_A (param $0 i32) (param $1 i32) (result i32) ;; 4
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.atomic.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_1_U_1 (param $0 i32) (param $1 i32) (result i32) ;; 5
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_1 (param $0 i32) (param $1 i32) (result i32) ;; 6
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load16_s align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_A (param $0 i32) (param $1 i32) (result i32) ;; 7
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.atomic.load16_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_2 (param $0 i32) (param $1 i32) (result i32) ;; 8
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load16_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_U_1 (param $0 i32) (param $1 i32) (result i32) ;; 9
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load16_u align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_U_A (param $0 i32) (param $1 i32) (result i32) ;; 10
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.atomic.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_U_2 (param $0 i32) (param $1 i32) (result i32) ;; 11
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_1 (param $0 i32) (param $1 i32) (result i32) ;; 12
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_2 (param $0 i32) (param $1 i32) (result i32) ;; 13
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_A (param $0 i32) (param $1 i32) (result i32) ;; 14
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.atomic.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_4 (param $0 i32) (param $1 i32) (result i32) ;; 15
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_U_1 (param $0 i32) (param $1 i32) (result i32) ;; 16
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_U_2 (param $0 i32) (param $1 i32) (result i32) ;; 17
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_U_A (param $0 i32) (param $1 i32) (result i32) ;; 18
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.atomic.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_U_4 (param $0 i32) (param $1 i32) (result i32) ;; 19
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_1_A (param $0 i32) (param $1 i32) (result i64) ;; 20
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.atomic.load8_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_1_1 (param $0 i32) (param $1 i32) (result i64) ;; 21
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load8_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_1_U_A (param $0 i32) (param $1 i32) (result i64) ;; 22
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.atomic.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_1_U_1 (param $0 i32) (param $1 i32) (result i64) ;; 23
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_1 (param $0 i32) (param $1 i32) (result i64) ;; 24
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load16_s align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_A (param $0 i32) (param $1 i32) (result i64) ;; 25
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.atomic.load16_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_2 (param $0 i32) (param $1 i32) (result i64) ;; 26
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load16_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_U_1 (param $0 i32) (param $1 i32) (result i64) ;; 27
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load16_u align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_U_A (param $0 i32) (param $1 i32) (result i64) ;; 28
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.atomic.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_U_2 (param $0 i32) (param $1 i32) (result i64) ;; 29
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_1 (param $0 i32) (param $1 i32) (result i64) ;; 30
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load32_s align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_2 (param $0 i32) (param $1 i32) (result i64) ;; 31
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load32_s align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_A (param $0 i32) (param $1 i32) (result i64) ;; 32
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.atomic.load32_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_4 (param $0 i32) (param $1 i32) (result i64) ;; 33
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load32_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_U_1 (param $0 i32) (param $1 i32) (result i64) ;; 34
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load32_u align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_U_2 (param $0 i32) (param $1 i32) (result i64) ;; 35
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load32_u align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_U_A (param $0 i32) (param $1 i32) (result i64) ;; 36
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.atomic.load32_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_U_4 (param $0 i32) (param $1 i32) (result i64) ;; 37
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load32_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_1 (param $0 i32) (param $1 i32) (result i64) ;; 38
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_2 (param $0 i32) (param $1 i32) (result i64) ;; 39
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_4 (param $0 i32) (param $1 i32) (result i64) ;; 40
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load align=4
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_A (param $0 i32) (param $1 i32) (result i64) ;; 41
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.atomic.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_8 (param $0 i32) (param $1 i32) (result i64) ;; 42
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_1 (param $0 i32) (param $1 i32) (result i64) ;; 43
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_2 (param $0 i32) (param $1 i32) (result i64) ;; 44
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_4 (param $0 i32) (param $1 i32) (result i64) ;; 45
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load align=4
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_A (param $0 i32) (param $1 i32) (result i64) ;; 46
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.atomic.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_8 (param $0 i32) (param $1 i32) (result i64) ;; 47
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_1_A (param $0 i32) (param $1 i32) (result f32) ;; 48
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.atomic.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_1_1 (param $0 i32) (param $1 i32) (result f32) ;; 49
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_2_1 (param $0 i32) (param $1 i32) (result f32) ;; 50
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.load16_u align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_2_A (param $0 i32) (param $1 i32) (result f32) ;; 51
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.atomic.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_2_2 (param $0 i32) (param $1 i32) (result f32) ;; 52
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_4_1 (param $0 i32) (param $1 i32) (result f32) ;; 53
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_4_2 (param $0 i32) (param $1 i32) (result f32) ;; 54
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_4_A (param $0 i32) (param $1 i32) (result f32) ;; 55
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f32.atomic.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_4_4 (param $0 i32) (param $1 i32) (result f32) ;; 56
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f32.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_1_A (param $0 i32) (param $1 i32) (result f64) ;; 57
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.atomic.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_1_1 (param $0 i32) (param $1 i32) (result f64) ;; 58
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_2_1 (param $0 i32) (param $1 i32) (result f64) ;; 59
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.load16_u align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_2_A (param $0 i32) (param $1 i32) (result f64) ;; 60
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.atomic.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_2_2 (param $0 i32) (param $1 i32) (result f64) ;; 61
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_4_1 (param $0 i32) (param $1 i32) (result f64) ;; 62
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_4_2 (param $0 i32) (param $1 i32) (result f64) ;; 63
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_4_A (param $0 i32) (param $1 i32) (result f64) ;; 64
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.atomic.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_4_4 (param $0 i32) (param $1 i32) (result f64) ;; 65
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_1 (param $0 i32) (param $1 i32) (result f64) ;; 66
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_2 (param $0 i32) (param $1 i32) (result f64) ;; 67
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_4 (param $0 i32) (param $1 i32) (result f64) ;; 68
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.load align=4
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_A (param $0 i32) (param $1 i32) (result f64) ;; 69
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (f64.atomic.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_8 (param $0 i32) (param $1 i32) (result f64) ;; 70
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (f64.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_1_A (param $0 i32) (param $1 i32) (param $2 i32) ;; 71
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.atomic.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_1_1 (param $0 i32) (param $1 i32) (param $2 i32) ;; 72
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_2_1 (param $0 i32) (param $1 i32) (param $2 i32) ;; 73
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.store16 align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_2_A (param $0 i32) (param $1 i32) (param $2 i32) ;; 74
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.atomic.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_2_2 (param $0 i32) (param $1 i32) (param $2 i32) ;; 75
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_4_1 (param $0 i32) (param $1 i32) (param $2 i32) ;; 76
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.store align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_4_2 (param $0 i32) (param $1 i32) (param $2 i32) ;; 77
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.store align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_4_A (param $0 i32) (param $1 i32) (param $2 i32) ;; 78
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.atomic.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_4_4 (param $0 i32) (param $1 i32) (param $2 i32) ;; 79
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_1_A (param $0 i32) (param $1 i32) (param $2 i64) ;; 80
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.atomic.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_1_1 (param $0 i32) (param $1 i32) (param $2 i64) ;; 81
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_2_1 (param $0 i32) (param $1 i32) (param $2 i64) ;; 82
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store16 align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_2_A (param $0 i32) (param $1 i32) (param $2 i64) ;; 83
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.atomic.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_2_2 (param $0 i32) (param $1 i32) (param $2 i64) ;; 84
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_4_1 (param $0 i32) (param $1 i32) (param $2 i64) ;; 85
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store32 align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_4_2 (param $0 i32) (param $1 i32) (param $2 i64) ;; 86
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.store32 align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_4_A (param $0 i32) (param $1 i32) (param $2 i64) ;; 87
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.atomic.store32
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_4_4 (param $0 i32) (param $1 i32) (param $2 i64) ;; 88
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.store32
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_1 (param $0 i32) (param $1 i32) (param $2 i64) ;; 89
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_2 (param $0 i32) (param $1 i32) (param $2 i64) ;; 90
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.store align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_4 (param $0 i32) (param $1 i32) (param $2 i64) ;; 91
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.store align=4
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_A (param $0 i32) (param $1 i32) (param $2 i64) ;; 92
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.atomic.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_8 (param $0 i32) (param $1 i32) (param $2 i64) ;; 93
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_1_A (param $0 i32) (param $1 i32) (param $2 f32) ;; 94
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.atomic.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_1_1 (param $0 i32) (param $1 i32) (param $2 f32) ;; 95
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_2_1 (param $0 i32) (param $1 i32) (param $2 f32) ;; 96
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.store16 align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_2_A (param $0 i32) (param $1 i32) (param $2 f32) ;; 97
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.atomic.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_2_2 (param $0 i32) (param $1 i32) (param $2 f32) ;; 98
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_4_1 (param $0 i32) (param $1 i32) (param $2 f32) ;; 99
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.store align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_4_2 (param $0 i32) (param $1 i32) (param $2 f32) ;; 100
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.store align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_4_A (param $0 i32) (param $1 i32) (param $2 f32) ;; 101
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f32.atomic.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_4_4 (param $0 i32) (param $1 i32) (param $2 f32) ;; 102
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f32.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_1_A (param $0 i32) (param $1 i32) (param $2 f64) ;; 103
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.atomic.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_1_1 (param $0 i32) (param $1 i32) (param $2 f64) ;; 104
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_2_1 (param $0 i32) (param $1 i32) (param $2 f64) ;; 105
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.store16 align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_2_A (param $0 i32) (param $1 i32) (param $2 f64) ;; 106
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.atomic.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_2_2 (param $0 i32) (param $1 i32) (param $2 f64) ;; 107
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_4_1 (param $0 i32) (param $1 i32) (param $2 f64) ;; 108
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.store align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_4_2 (param $0 i32) (param $1 i32) (param $2 f64) ;; 109
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.store align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_4_A (param $0 i32) (param $1 i32) (param $2 f64) ;; 110
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.atomic.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_4_4 (param $0 i32) (param $1 i32) (param $2 f64) ;; 111
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_1 (param $0 i32) (param $1 i32) (param $2 f64) ;; 112
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.store align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_2 (param $0 i32) (param $1 i32) (param $2 f64) ;; 113
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.store align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_4 (param $0 i32) (param $1 i32) (param $2 f64) ;; 114
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.store align=4
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_A (param $0 i32) (param $1 i32) (param $2 f64) ;; 115
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (f64.atomic.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_8 (param $0 i32) (param $1 i32) (param $2 f64) ;; 116
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (f64.store
   (get_local $3)
   (get_local $2)
  )
 )
)
(module
 (type $0 (func))
 (type $FUNCSIG$v (func))
 (import "env" "DYNAMICTOP_PTR" (global $DYNAMICTOP_PTR i32))
 (import "env" "segfault" (func $segfault))
 (import "env" "alignfault" (func $alignfault))
 (memory $0 100 100)
 (func $loads (type $0) ;; 0
  (drop
   (call $SAFE_HEAP_LOAD_i32_4_U_4
    (i32.const 1)
    (i32.const 0)
   )
  )
 )
 (func $SAFE_HEAP_LOAD_i32_1_1 (param $0 i32) (param $1 i32) (result i32) ;; 1
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load8_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_1_U_1 (param $0 i32) (param $1 i32) (result i32) ;; 2
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_1 (param $0 i32) (param $1 i32) (result i32) ;; 3
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load16_s align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_2 (param $0 i32) (param $1 i32) (result i32) ;; 4
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load16_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_U_1 (param $0 i32) (param $1 i32) (result i32) ;; 5
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load16_u align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_U_2 (param $0 i32) (param $1 i32) (result i32) ;; 6
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_1 (param $0 i32) (param $1 i32) (result i32) ;; 7
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_2 (param $0 i32) (param $1 i32) (result i32) ;; 8
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_4 (param $0 i32) (param $1 i32) (result i32) ;; 9
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_U_1 (param $0 i32) (param $1 i32) (result i32) ;; 10
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_U_2 (param $0 i32) (param $1 i32) (result i32) ;; 11
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_U_4 (param $0 i32) (param $1 i32) (result i32) ;; 12
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_1_1 (param $0 i32) (param $1 i32) (result i64) ;; 13
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load8_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_1_U_1 (param $0 i32) (param $1 i32) (result i64) ;; 14
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_1 (param $0 i32) (param $1 i32) (result i64) ;; 15
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load16_s align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_2 (param $0 i32) (param $1 i32) (result i64) ;; 16
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load16_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_U_1 (param $0 i32) (param $1 i32) (result i64) ;; 17
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load16_u align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_U_2 (param $0 i32) (param $1 i32) (result i64) ;; 18
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_1 (param $0 i32) (param $1 i32) (result i64) ;; 19
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load32_s align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_2 (param $0 i32) (param $1 i32) (result i64) ;; 20
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load32_s align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_4 (param $0 i32) (param $1 i32) (result i64) ;; 21
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load32_s
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_U_1 (param $0 i32) (param $1 i32) (result i64) ;; 22
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load32_u align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_U_2 (param $0 i32) (param $1 i32) (result i64) ;; 23
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load32_u align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_U_4 (param $0 i32) (param $1 i32) (result i64) ;; 24
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load32_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_1 (param $0 i32) (param $1 i32) (result i64) ;; 25
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_2 (param $0 i32) (param $1 i32) (result i64) ;; 26
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_4 (param $0 i32) (param $1 i32) (result i64) ;; 27
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load align=4
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_8 (param $0 i32) (param $1 i32) (result i64) ;; 28
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_1 (param $0 i32) (param $1 i32) (result i64) ;; 29
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_2 (param $0 i32) (param $1 i32) (result i64) ;; 30
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_4 (param $0 i32) (param $1 i32) (result i64) ;; 31
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load align=4
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_8 (param $0 i32) (param $1 i32) (result i64) ;; 32
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_1_1 (param $0 i32) (param $1 i32) (result f32) ;; 33
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_2_1 (param $0 i32) (param $1 i32) (result f32) ;; 34
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.load16_u align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_2_2 (param $0 i32) (param $1 i32) (result f32) ;; 35
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_4_1 (param $0 i32) (param $1 i32) (result f32) ;; 36
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_4_2 (param $0 i32) (param $1 i32) (result f32) ;; 37
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_4_4 (param $0 i32) (param $1 i32) (result f32) ;; 38
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f32.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_1_1 (param $0 i32) (param $1 i32) (result f64) ;; 39
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.load8_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_2_1 (param $0 i32) (param $1 i32) (result f64) ;; 40
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.load16_u align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_2_2 (param $0 i32) (param $1 i32) (result f64) ;; 41
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.load16_u
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_4_1 (param $0 i32) (param $1 i32) (result f64) ;; 42
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_4_2 (param $0 i32) (param $1 i32) (result f64) ;; 43
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_4_4 (param $0 i32) (param $1 i32) (result f64) ;; 44
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_1 (param $0 i32) (param $1 i32) (result f64) ;; 45
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.load align=1
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_2 (param $0 i32) (param $1 i32) (result f64) ;; 46
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.load align=2
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_4 (param $0 i32) (param $1 i32) (result f64) ;; 47
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.load align=4
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_8 (param $0 i32) (param $1 i32) (result f64) ;; 48
  (local $2 i32)
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $2)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (f64.load
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_1_1 (param $0 i32) (param $1 i32) (param $2 i32) ;; 49
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_2_1 (param $0 i32) (param $1 i32) (param $2 i32) ;; 50
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.store16 align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_2_2 (param $0 i32) (param $1 i32) (param $2 i32) ;; 51
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_4_1 (param $0 i32) (param $1 i32) (param $2 i32) ;; 52
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.store align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_4_2 (param $0 i32) (param $1 i32) (param $2 i32) ;; 53
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.store align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_4_4 (param $0 i32) (param $1 i32) (param $2 i32) ;; 54
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_1_1 (param $0 i32) (param $1 i32) (param $2 i64) ;; 55
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_2_1 (param $0 i32) (param $1 i32) (param $2 i64) ;; 56
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store16 align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_2_2 (param $0 i32) (param $1 i32) (param $2 i64) ;; 57
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_4_1 (param $0 i32) (param $1 i32) (param $2 i64) ;; 58
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store32 align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_4_2 (param $0 i32) (param $1 i32) (param $2 i64) ;; 59
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.store32 align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_4_4 (param $0 i32) (param $1 i32) (param $2 i64) ;; 60
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.store32
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_1 (param $0 i32) (param $1 i32) (param $2 i64) ;; 61
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_2 (param $0 i32) (param $1 i32) (param $2 i64) ;; 62
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.store align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_4 (param $0 i32) (param $1 i32) (param $2 i64) ;; 63
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.store align=4
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_8 (param $0 i32) (param $1 i32) (param $2 i64) ;; 64
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_1_1 (param $0 i32) (param $1 i32) (param $2 f32) ;; 65
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_2_1 (param $0 i32) (param $1 i32) (param $2 f32) ;; 66
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.store16 align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_2_2 (param $0 i32) (param $1 i32) (param $2 f32) ;; 67
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_4_1 (param $0 i32) (param $1 i32) (param $2 f32) ;; 68
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.store align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_4_2 (param $0 i32) (param $1 i32) (param $2 f32) ;; 69
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.store align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_4_4 (param $0 i32) (param $1 i32) (param $2 f32) ;; 70
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 4)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f32.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_1_1 (param $0 i32) (param $1 i32) (param $2 f64) ;; 71
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.store8
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_2_1 (param $0 i32) (param $1 i32) (param $2 f64) ;; 72
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.store16 align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_2_2 (param $0 i32) (param $1 i32) (param $2 f64) ;; 73
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.store16
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_4_1 (param $0 i32) (param $1 i32) (param $2 f64) ;; 74
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.store align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_4_2 (param $0 i32) (param $1 i32) (param $2 f64) ;; 75
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.store align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_4_4 (param $0 i32) (param $1 i32) (param $2 f64) ;; 76
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.store
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_1 (param $0 i32) (param $1 i32) (param $2 f64) ;; 77
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.store align=1
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_2 (param $0 i32) (param $1 i32) (param $2 f64) ;; 78
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.store align=2
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_4 (param $0 i32) (param $1 i32) (param $2 f64) ;; 79
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.store align=4
   (get_local $3)
   (get_local $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_8 (param $0 i32) (param $1 i32) (param $2 f64) ;; 80
  (local $3 i32)
  (set_local $3
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (get_local $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (get_local $3)
      (i32.const 8)
     )
     (i32.load
      (get_global $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (get_local $3)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (f64.store
   (get_local $3)
   (get_local $2)
  )
 )
)
