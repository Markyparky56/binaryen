(module
 (type $0 (func (param f32)))
 (type $1 (func))
 (type $2 (func (param f64) (result i32)))
 (type $3 (func (param f64 f64) (result f64)))
 (type $4 (func (result f64)))
 (type $5 (func (result i32)))
 (type $6 (func (param i32) (result i32)))
 (type $7 (func (param f64) (result f64)))
 (type $8 (func (result i64)))
 (type $9 (func (param i32 i64)))
 (import "env" "_emscripten_asm_const_vi" (func $import$0))
 (import "asm2wasm" "f64-to-int" (func $import$1 (param f64) (result i32)))
 (import "asm2wasm" "f64-rem" (func $import$2 (param f64 f64) (result f64)))
 (table 10 anyfunc)
 (elem (i32.const 0) $z $big_negative $z $z $w $w $importedDoubles $w $z $cneg)
 (memory $0 4096 4096)
 (data (i32.const 1026) "\14\00")
 (export "big_negative" (func $big_negative))
 (func $big_negative (type $1) ;; 0
  (local $var$0 f64)
  (set_local $var$0
   (f64.const -2147483648)
  )
  (set_local $var$0
   (f64.const -2147483648)
  )
  (set_local $var$0
   (f64.const -21474836480)
  )
  (set_local $var$0
   (f64.const 0.039625)
  )
  (set_local $var$0
   (f64.const -0.039625)
  )
 )
 (func $importedDoubles (type $4) (result f64) ;; 1
  (local $var$0 f64)
  (block $label$1 (result f64)
   (set_local $var$0
    (f64.add
     (f64.add
      (f64.add
       (f64.load
        (i32.const 8)
       )
       (f64.load
        (i32.const 16)
       )
      )
      (f64.neg
       (f64.load
        (i32.const 16)
       )
      )
     )
     (f64.neg
      (f64.load
       (i32.const 8)
      )
     )
    )
   )
   (if
    (i32.gt_s
     (i32.load
      (i32.const 24)
     )
     (i32.const 0)
    )
    (br $label$1
     (f64.const -3.4)
    )
   )
   (if
    (f64.gt
     (f64.load
      (i32.const 32)
     )
     (f64.const 0)
    )
    (br $label$1
     (f64.const 5.6)
    )
   )
   (f64.const 1.2)
  )
 )
 (func $doubleCompares (type $3) (param $var$0 f64) (param $var$1 f64) (result f64) ;; 2
  (local $var$2 i32)
  (local $var$3 f64)
  (local $var$4 f64)
  (block $label$1 (result f64)
   (if
    (f64.gt
     (get_local $var$0)
     (f64.const 0)
    )
    (br $label$1
     (f64.const 1.2)
    )
   )
   (if
    (f64.gt
     (get_local $var$4)
     (f64.const 0)
    )
    (br $label$1
     (f64.const -3.4)
    )
   )
   (if
    (i32.gt_s
     (get_local $var$2)
     (i32.const 0)
    )
    (br $label$1
     (f64.const 5.6)
    )
   )
   (if
    (f64.lt
     (get_local $var$0)
     (get_local $var$1)
    )
    (br $label$1
     (get_local $var$0)
    )
   )
   (get_local $var$1)
  )
 )
 (func $intOps (type $5) (result i32) ;; 3
  (local $var$0 i32)
  (i32.eq
   (get_local $var$0)
   (i32.const 0)
  )
 )
 (func $hexLiterals (type $1) ;; 4
  (drop
   (i32.add
    (i32.add
     (i32.const 0)
     (i32.const 313249263)
    )
    (i32.const -19088752)
   )
  )
 )
 (func $conversions (type $1) ;; 5
  (local $var$0 i32)
  (local $var$1 f64)
  (set_local $var$0
   (call $import$1
    (get_local $var$1)
   )
  )
  (set_local $var$1
   (f64.convert_s/i32
    (get_local $var$0)
   )
  )
  (set_local $var$1
   (f64.convert_u/i32
    (i32.shr_u
     (get_local $var$0)
     (i32.const 0)
    )
   )
  )
 )
 (func $seq (type $1) ;; 6
  (local $var$0 f64)
  (set_local $var$0
   (f64.sub
    (block $label$1 (result f64)
     (drop
      (f64.const 0.1)
     )
     (f64.const 5.1)
    )
    (block $label$2 (result f64)
     (drop
      (f64.const 3.2)
     )
     (f64.const 4.2)
    )
   )
  )
 )
 (func $switcher (type $6) (param $var$0 i32) (result i32) ;; 7
  (block $label$1 (result i32)
   (block $label$2
    (block $label$3
     (block $label$4
      (block $label$5
       (br_table $label$5 $label$4 $label$3
        (i32.sub
         (get_local $var$0)
         (i32.const 1)
        )
       )
      )
      (br $label$1
       (i32.const 1)
      )
     )
     (br $label$1
      (i32.const 2)
     )
    )
    (nop)
   )
   (block $label$6
    (block $label$7
     (block $label$8
      (block $label$9
       (br_table $label$8 $label$7 $label$7 $label$7 $label$7 $label$7 $label$7 $label$9 $label$7
        (i32.sub
         (get_local $var$0)
         (i32.const 5)
        )
       )
      )
      (br $label$1
       (i32.const 121)
      )
     )
     (br $label$1
      (i32.const 51)
     )
    )
    (nop)
   )
   (block $label$10
    (block $label$11
     (block $label$12
      (block $label$13
       (block $label$14
        (block $label$15
         (br_table $label$12 $label$11 $label$11 $label$13 $label$11 $label$11 $label$11 $label$11 $label$14 $label$11 $label$15 $label$11
          (i32.sub
           (get_local $var$0)
           (i32.const 2)
          )
         )
        )
        (br $label$10)
       )
       (br $label$10)
      )
      (block $label$16
       (loop $label$17
        (br $label$16)
       )
      )
     )
     (block $label$18
      (loop $label$19
       (br $label$10)
      )
     )
    )
    (nop)
   )
   (i32.const 0)
  )
 )
 (func $blocker (type $1) ;; 8
  (block $label$1
   (br $label$1)
  )
 )
 (func $frem (type $4) (result f64) ;; 9
  (call $import$2
   (f64.const 5.5)
   (f64.const 1.2)
  )
 )
 (func $big_uint_div_u (type $5) (result i32) ;; 10
  (local $var$0 i32)
  (set_local $var$0
   (i32.and
    (i32.div_u
     (i32.const -1)
     (i32.const 2)
    )
    (i32.const -1)
   )
  )
  (get_local $var$0)
 )
 (func $fr (type $0) (param $var$0 f32) ;; 11
  (local $var$1 f32)
  (local $var$2 f64)
  (drop
   (f32.demote/f64
    (get_local $var$2)
   )
  )
  (drop
   (get_local $var$1)
  )
  (drop
   (f32.const 5)
  )
  (drop
   (f32.const 0)
  )
  (drop
   (f32.const 5)
  )
  (drop
   (f32.const 0)
  )
 )
 (func $negZero (type $4) (result f64) ;; 12
  (f64.const -0)
 )
 (func $abs (type $1) ;; 13
  (local $var$0 i32)
  (local $var$1 i32)
  (local $var$2 f32)
  (local $var$3 f64)
  (set_local $var$0
   (block $label$1 (result i32)
    (set_local $var$1
     (i32.const 0)
    )
    (select
     (i32.sub
      (i32.const 0)
      (get_local $var$1)
     )
     (get_local $var$1)
     (i32.lt_s
      (get_local $var$1)
      (i32.const 0)
     )
    )
   )
  )
  (set_local $var$3
   (f64.abs
    (f64.const 0)
   )
  )
  (set_local $var$2
   (f32.abs
    (f32.const 0)
   )
  )
 )
 (func $neg (type $1) ;; 14
  (local $var$0 f32)
  (set_local $var$0
   (f32.neg
    (get_local $var$0)
   )
  )
  (call_indirect $0
   (get_local $var$0)
   (i32.add
    (i32.and
     (i32.const 1)
     (i32.const 7)
    )
    (i32.const 8)
   )
  )
 )
 (func $cneg (type $0) (param $var$0 f32) ;; 15
  (call_indirect $0
   (get_local $var$0)
   (i32.add
    (i32.and
     (i32.const 1)
     (i32.const 7)
    )
    (i32.const 8)
   )
  )
 )
 (func $___syscall_ret (type $1) ;; 16
  (local $var$0 i32)
  (drop
   (i32.gt_u
    (i32.shr_u
     (get_local $var$0)
     (i32.const 0)
    )
    (i32.const -4096)
   )
  )
 )
 (func $z (type $1) ;; 17
  (nop)
 )
 (func $w (type $1) ;; 18
  (nop)
 )
 (func $block_and_after (type $5) (result i32) ;; 19
  (block $label$1
   (drop
    (i32.const 1)
   )
   (br $label$1)
  )
  (i32.const 0)
 )
 (func $loop-roundtrip (type $7) (param $var$0 f64) (result f64) ;; 20
  (loop $label$1 (result f64)
   (drop
    (get_local $var$0)
   )
   (get_local $var$0)
  )
 )
 (func $big-i64 (type $8) (result i64) ;; 21
  (i64.const -9218868437227405313)
 )
 (func $i64-store32 (type $9) (param $var$0 i32) (param $var$1 i64) ;; 22
  (i64.store32
   (get_local $var$0)
   (get_local $var$1)
  )
 )
 (func $return-unreachable (type $5) (result i32) ;; 23
  (return
   (i32.const 1)
  )
 )
 (func $unreachable-block (type $5) (result i32) ;; 24
  (block $label$1
   (drop
    (i32.const 1)
   )
   (return
    (i32.const 2)
   )
  )
 )
 (func $unreachable-block-toplevel (type $5) (result i32) ;; 25
  (drop
   (i32.const 1)
  )
  (return
   (i32.const 2)
  )
 )
 (func $unreachable-block0 (type $5) (result i32) ;; 26
  (block $label$1
   (return
    (i32.const 2)
   )
  )
 )
 (func $unreachable-block0-toplevel (type $5) (result i32) ;; 27
  (return
   (i32.const 2)
  )
 )
 (func $unreachable-block-with-br (type $5) (result i32) ;; 28
  (block $label$1
   (drop
    (i32.const 1)
   )
   (br $label$1)
  )
  (i32.const 1)
 )
 (func $unreachable-if (type $5) (result i32) ;; 29
  (if
   (i32.const 3)
   (return
    (i32.const 2)
   )
   (return
    (i32.const 1)
   )
  )
 )
 (func $unreachable-if-toplevel (type $5) (result i32) ;; 30
  (if
   (i32.const 3)
   (return
    (i32.const 2)
   )
   (return
    (i32.const 1)
   )
  )
 )
 (func $unreachable-loop (type $5) (result i32) ;; 31
  (loop $label$1
   (nop)
   (return
    (i32.const 1)
   )
  )
 )
 (func $unreachable-loop0 (type $5) (result i32) ;; 32
  (loop $label$1
   (return
    (i32.const 1)
   )
  )
 )
 (func $unreachable-loop-toplevel (type $5) (result i32) ;; 33
  (loop $label$1
   (nop)
   (return
    (i32.const 1)
   )
  )
 )
 (func $unreachable-loop0-toplevel (type $5) (result i32) ;; 34
  (loop $label$1
   (return
    (i32.const 1)
   )
  )
 )
 (func $unreachable-ifs (type $1) ;; 35
  (unreachable)
 )
 (func $unreachable-if-arm (type $1) ;; 36
  (if
   (i32.const 1)
   (nop)
   (unreachable)
  )
 )
)

